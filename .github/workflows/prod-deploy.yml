name: Production Merge and Deploy

on: workflow_dispatch

env:
    SUPERUSER_TOKEN: ${{ secrets.PESU_DEV_SUPERUSER_TOKEN }}
    ALLOWED_USERS: ${{ vars.PROD_DEPLOYMENT_ALLOWED_USERS }}


jobs:
    check-permissions:
        name: Check Permissions
        runs-on: ubuntu-latest
        steps:
            - name: Check if user has permissions
              id: check-permissions
              run: |
                  PERMISSION_GRANTED=0
                  IFS=',' read -ra USERS <<< "${{ env.ALLOWED_USERS }}"
                  for user in "${USERS[@]}"; do
                    if [[ "$user" == "${{ github.actor }}" ]]; then
                      PERMISSION_GRANTED=1
                      break
                    fi
                  done
                  if [[ "$PERMISSION_GRANTED" -ne 1 ]]; then
                    echo "‚ùå You do not have permission to trigger this workflow."
                    exit 1
                  fi
                  echo "‚úÖ Permission granted"
                  echo "user=${{ github.actor }}" >> $GITHUB_OUTPUT
                  echo "allowed=true" >> $GITHUB_OUTPUT
    merge:
        name: Merge dev to main
        runs-on: ubuntu-latest
        needs: [check-permissions]
        outputs:
            has_changes: ${{ steps.check-changes.outputs.has_changes }}
            pre_merge_commit: ${{ steps.store-commit.outputs.commit }}
        concurrency:
            group: production-merge
            cancel-in-progress: false
        steps:
            - name: Checkout main branch
              uses: actions/checkout@v4
              with:
                  ref: main
                  token: ${{ env.SUPERUSER_TOKEN }}
                  fetch-depth: 0

            - name: Configure Git
              run: |
                  git config user.name "github-actions[bot]"
                  git config user.email "github-actions[bot]@users.noreply.github.com"

            - name: Store current commit before merge
              id: store-commit
              run: |
                  CURRENT_COMMIT=$(git rev-parse HEAD)
                  echo "commit=$CURRENT_COMMIT" >> $GITHUB_OUTPUT
                  echo "üìå Stored pre-merge commit: $CURRENT_COMMIT"

            - name: Fetch latest code from dev branch
              id: check-changes
              run: |
                  set -e
                  git fetch origin dev

                  CHANGES=$(git rev-list main..origin/dev --count)
                  echo "changes=$CHANGES" >> $GITHUB_OUTPUT
                  if [ "$CHANGES" -eq "0" ]; then
                    echo "‚ÑπÔ∏è No new changes to deploy"
                    echo "has_changes=false" >> $GITHUB_OUTPUT
                  else
                    echo "has_changes=true" >> $GITHUB_OUTPUT 
                    echo "üìä Found $CHANGES commits to merge"
                    git log --oneline main..origin/dev
                  fi

            - name: Merge changes
              if: steps.check-changes.outputs.has_changes == 'true'
              run: |
                  git merge --ff origin/dev || {
                    echo "‚ùå Merge conflict detected. Please resolve conflicts manually."
                    git merge --abort
                    exit 1
                  }

            - name: Push changes to main branch
              if: steps.check-changes.outputs.has_changes == 'true'
              run: git push origin main

    rollback_image:
      runs-on: ubuntu-latest
      steps:
        - name: GHCR login
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - name: Tagging Image as rollback
          run: |
            IMAGE=ghcr.io/${{ github.repository_owner }}/${{ vars.DOCKER_IMAGE_NAME }}
            docker pull $IMAGE:${{ vars.PROD_DOCKER_IMAGE_TAG}}
            echo "Tagging current prod image as rollback"
            docker tag $IMAGE:${{ vars.PROD_DOCKER_IMAGE_TAG}} $IMAGE:rollback
            echo "Pushing rollback tag"
            docker push $IMAGE:rollback

    build_and_push_image:
      uses: ./.github/workflows/build-and-push-image.yml
      with:
        tag: prod

    deploy:
        needs: build_and_push_image
        name: Deploy image to production
        runs-on: discord-bot-deploy-runner
        needs: merge
        if: needs.merge.result == 'success' && needs.merge.outputs.has_changes == 'true'
        steps:
            - name: GHCR login
              uses: docker/login-action@v3
              with:
                registry: ghcr.io
                username: ${{ github.repository_owner }}
                password: ${{ secrets.GITHUB_TOKEN }}


            - name: Pull latest image and restart 
              run: |
                REPO_OWNER=${{ github.repository_owner }} \
                IMAGE_TAG=${{ vars.PROD_DOCKER_IMAGE_TAG }} \
                docker compose pull

                REPO_OWNER=${{ github.repository_owner }} \
                IMAGE_TAG=${{ vars.PROD_DOCKER_IMAGE_TAG }} \
                docker compose up -d


            - name: Health Check
              run: |
                sleep 10
                if docker ps --filter "name=${{ vars.PROD_DOCKER_CONTAINER_NAME }}" --filter "status=running" --format '{{.Names}}' | grep -q "${{ vars.PROD_DOCKER_CONTAINER_NAME }}"; then
                  echo "Production Container is running successfully"
                else
                  echo "Production Container failed to start"
                  docker logs ${{ vars.PROD_DOCKER_CONTAINER_NAME }} --tail 20
                  exit 1
                fi

    rollback:
        name: Rollback on failure
        runs-on: discord-bot-deploy-runner
        needs: [merge, deploy]
        if: failure() && needs.merge.result == 'success'
        steps:
          - name: GHCR login
            uses: docker/login-action@v3
            with:
              registry: ghcr.io
              username: ${{ github.repository_owner }}
              password: ${{ secrets.GITHUB_TOKEN }}

          - name: Switch to rollback image
            run: |
              echo "Deployment failed. Rolling back..."
              docker rm -f ${{ vars.PROD_DOCKER_CONTAINER_NAME }} || true
              docker run -d \
                --name ${{ vars.PROD_DOCKER_CONTAINER_NAME }} \
                ghcr.io/${{ github.repository_owner }}/${{ vars.DOCKER_IMAGE_NAME }}:rollback
              exit 1