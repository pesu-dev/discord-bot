name: Dev Deploy

on:
    push:
        branches:
            - dev

env:
    DEPLOYMENT_PATH: ${{ vars.DEV_DEPLOYMENT_PATH }}
    PM2_APP_NAME: ${{ vars.DEV_PM2_APP_NAME }}
    IMAGE_NAME: discord-bot
    IMAGE_TAG: dev                    
    CONTAINER_NAME: discord-bot  

jobs:

    build_and_push_image:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout repo
          uses: actions/checkout@v4

        - name: Install GitHub CLI
          uses: cli/cli-action@v2

        - name: Trigger build and push
          env:
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          run: |
            RUN_ID=$(gh workflow run "Build and Push Docker Image to GHCR" --ref dev --json id --jq .id)
            echo "Waiting for build to finish"
            gh run watch $RUN_ID

    deploy:
        runs-on: discord-bot-deploy-runner

        steps:
            - name: GHCR login
              uses: docker/login-action@v3
              with:
                registry: ghcr.io
                username: ${{ github.repository_owner }}
                password: ${{ secrets.GITHUB_TOKEN }}

            - name: Pull latest image
              run: docker pull ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

            - name: Stop and delete old container
              run: |
                if [ "$(docker ps -q -f name=${{ env.CONTAINER_NAME }}-${{ env.IMAGE_TAG }})" ]; then
                  echo "Stopping and removing existing container"
                  docker stop ${{ env.CONTAINER_NAME }}-${{ env.IMAGE_TAG }}
                  docker rm ${{ env.CONTAINER_NAME }}-${{ env.IMAGE_TAG }}
                else
                  echo "No existing container found with name ${{ env.CONTAINER_NAME }}-${{ env.IMAGE_TAG }}"
                fi

            - name: Run new container
              run: |
                docker run -d \
                  --name ${{ env.CONTAINER_NAME }}-${{ env.IMAGE_TAG }} \
                  --restart always \
                  ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}


            - name: Health Check
              run: |
                  sleep 10 # Give bot time to start
                  if pm2 describe ${{ env.PM2_APP_NAME }} | grep -q "online"; then
                    echo "✅ Bot is running successfully"
                  else
                    echo "❌ Bot failed to start properly"
                    pm2 logs ${{ env.PM2_APP_NAME }} --lines 10
                    exit 1
                  fi